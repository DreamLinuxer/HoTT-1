{-# OPTIONS --without-K #-}

module Reversible.Pi.Semantics where

open import Type using (Type; _‚äî_; Type‚ÇÄ; Type‚ÇÅ)
open import Zero using (ùüò)
open import One
open import Paths using (_==_; refl; !; _‚óæ_; ap; tpt; ind=)
open import Coproduct
open import DependentSum using (Œ£; _,_; _√ó_; p‚ÇÅ)
open import Functions using (_‚àò_)
open import Univalence using (ua)
open import Equivalences using (_‚âÉ_; ide; !e; _‚óè_; qinv-is-equiv; hae-is-qinv)
open import NaturalNumbers
open import PropositionalTruncation using (‚à£_‚à£; recTrunc; identify)

open import PathsInSigma using (dpair=; pair=; dpair=-e‚ÇÅ)

open import Reversible.Pi.Syntax
--open import Reversible.Pi.FinUniverse using (all-1-paths)

open import EmbeddingsInUniverse using (module UnivalentUniverseOfFiniteTypes)
open UnivalentUniverseOfFiniteTypes

M : Type‚ÇÅ
M = Œ£ Type‚ÇÄ is-finite

fromSize : ‚Ñï ‚Üí U
fromSize 0        = ZERO
fromSize (succ n) = PLUS ONE (fromSize n)

canonicalU : U ‚Üí U
canonicalU = fromSize ‚àò size

size+ : (n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí PLUS (fromSize n‚ÇÅ) (fromSize n‚ÇÇ) ‚ü∑ fromSize (add n‚ÇÅ n‚ÇÇ)
size+ 0         n‚ÇÇ = unite‚Çäl
size+ (succ n‚ÇÅ) n‚ÇÇ = assocr‚Çä ‚óé (id‚ü∑ ‚äï size+ n‚ÇÅ n‚ÇÇ)

size* : (n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí TIMES (fromSize n‚ÇÅ) (fromSize n‚ÇÇ) ‚ü∑ fromSize (mult n‚ÇÅ n‚ÇÇ)
size* 0         n‚ÇÇ = absorbr
size* (succ n‚ÇÅ) n‚ÇÇ = dist ‚óé ((unite‚ãÜl ‚äï size* n‚ÇÅ n‚ÇÇ) ‚óé size+ n‚ÇÇ (mult n‚ÇÅ n‚ÇÇ))

normalizeC : (t : U) ‚Üí t ‚ü∑ canonicalU t
normalizeC ZERO = id‚ü∑
normalizeC ONE  = uniti‚Çäl ‚óé swap‚Çä
normalizeC (PLUS t‚ÇÄ t‚ÇÅ) =
  (normalizeC t‚ÇÄ ‚äï normalizeC t‚ÇÅ) ‚óé size+ (size t‚ÇÄ) (size t‚ÇÅ) 
normalizeC (TIMES t‚ÇÄ t‚ÇÅ) =
  (normalizeC t‚ÇÄ ‚äó normalizeC t‚ÇÅ) ‚óé size* (size t‚ÇÄ) (size t‚ÇÅ)

#‚ü¶_‚üß‚ÇÄ : U ‚Üí Type‚ÇÄ
#‚ü¶ ZERO ‚üß‚ÇÄ        = ùüò
#‚ü¶ ONE  ‚üß‚ÇÄ        = ùüô
#‚ü¶ PLUS  t‚ÇÅ t‚ÇÇ ‚üß‚ÇÄ = #‚ü¶ t‚ÇÅ ‚üß‚ÇÄ + #‚ü¶ t‚ÇÇ ‚üß‚ÇÄ
#‚ü¶ TIMES t‚ÇÅ t‚ÇÇ ‚üß‚ÇÄ = #‚ü¶ t‚ÇÅ ‚üß‚ÇÄ √ó #‚ü¶ t‚ÇÇ ‚üß‚ÇÄ

#‚ü¶_‚üß‚ÇÅ : {X Y : U} ‚Üí X ‚ü∑ Y ‚Üí #‚ü¶ X ‚üß‚ÇÄ ‚âÉ #‚ü¶ Y ‚üß‚ÇÄ
#‚ü¶ unite‚Çäl ‚üß‚ÇÅ = (Œª { (i‚ÇÅ ()); (i‚ÇÇ x) ‚Üí x }) ,
  qinv-is-equiv (i‚ÇÇ , (Œª { (i‚ÇÅ ()); x@(i‚ÇÇ _) ‚Üí refl x }) , refl)
#‚ü¶ swap‚Çä ‚üß‚ÇÅ = (Œª { (i‚ÇÅ x) ‚Üí i‚ÇÇ x; (i‚ÇÇ x) ‚Üí i‚ÇÅ x }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ x) ‚Üí i‚ÇÇ x; (i‚ÇÇ x) ‚Üí i‚ÇÅ x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))
#‚ü¶ assocl‚Çä ‚üß‚ÇÅ = (Œª { (i‚ÇÅ x) ‚Üí i‚ÇÅ (i‚ÇÅ x); (i‚ÇÇ (i‚ÇÅ x)) ‚Üí i‚ÇÅ (i‚ÇÇ x); (i‚ÇÇ (i‚ÇÇ x)) ‚Üí i‚ÇÇ x }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ (i‚ÇÅ x)) ‚Üí i‚ÇÅ x; (i‚ÇÅ (i‚ÇÇ x)) ‚Üí i‚ÇÇ (i‚ÇÅ x); (i‚ÇÇ x) ‚Üí i‚ÇÇ (i‚ÇÇ x) }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ (i‚ÇÅ _)) ‚Üí refl x; x@(i‚ÇÇ (i‚ÇÇ _)) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ (i‚ÇÅ _)) ‚Üí refl x; x@(i‚ÇÅ (i‚ÇÇ _)) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))
#‚ü¶ unite‚ãÜl ‚üß‚ÇÅ = (Œª { (_ , x) ‚Üí x }) ,
  qinv-is-equiv ((Œª x ‚Üí (0‚ÇÅ , x)) , (Œª { x@(0‚ÇÅ , _) ‚Üí refl x }) , refl)
#‚ü¶ swap‚ãÜ ‚üß‚ÇÅ = (Œª { (x , y) ‚Üí (y , x) }) , qinv-is-equiv ((Œª { (x , y) ‚Üí (y , x) }) , refl , refl)
#‚ü¶ assocl‚ãÜ ‚üß‚ÇÅ = (Œª { (x , y , z) ‚Üí ((x , y) , z) }) ,
  qinv-is-equiv ((Œª { ((x , y) , z) ‚Üí x , y , z }) , refl , refl)
#‚ü¶ absorbr ‚üß‚ÇÅ = (Œª { (() , _) }) , qinv-is-equiv ((Œª ()) , (Œª { (() , _) }) , (Œª ()))
#‚ü¶ dist ‚üß‚ÇÅ = (Œª { (i‚ÇÅ x , y) ‚Üí i‚ÇÅ (x , y); (i‚ÇÇ x , y) ‚Üí i‚ÇÇ (x , y) }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ (x , y)) ‚Üí i‚ÇÅ x , y; (i‚ÇÇ (x , y)) ‚Üí i‚ÇÇ x , y }) ,
    (Œª { x@(i‚ÇÅ _ , _) ‚Üí refl x; x@(i‚ÇÇ _ , _) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))
{- #‚ü¶ distl ‚üß‚ÇÅ = (Œª { (x , i‚ÇÅ y) ‚Üí i‚ÇÅ (x , y); (x , i‚ÇÇ y) ‚Üí i‚ÇÇ (x , y) }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ (x , y)) ‚Üí x , i‚ÇÅ y; (i‚ÇÇ (x , y)) ‚Üí x , i‚ÇÇ y }) ,
    (Œª { x@(_ , i‚ÇÅ _) ‚Üí refl x; x@(_ , i‚ÇÇ _) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))-}
#‚ü¶ _‚ü∑_.! f ‚üß‚ÇÅ = !e #‚ü¶ f ‚üß‚ÇÅ
#‚ü¶ f ‚óé g ‚üß‚ÇÅ = #‚ü¶ g ‚üß‚ÇÅ ‚óè #‚ü¶ f ‚üß‚ÇÅ
#‚ü¶ f ‚äï g ‚üß‚ÇÅ =
  let (f , e) = #‚ü¶ f ‚üß‚ÇÅ in
  let (f‚Åª¬π , Œµf , Œ∑f) = hae-is-qinv e in
  let (g , e) = #‚ü¶ g ‚üß‚ÇÅ in
  let (g‚Åª¬π , Œµg , Œ∑g) = hae-is-qinv e in
  (Œª { (i‚ÇÅ x) ‚Üí i‚ÇÅ (f x); (i‚ÇÇ x) ‚Üí i‚ÇÇ (g x) }) ,
    qinv-is-equiv ((Œª { (i‚ÇÅ y) ‚Üí i‚ÇÅ (f‚Åª¬π y); (i‚ÇÇ y) ‚Üí i‚ÇÇ (g‚Åª¬π y) }) ,
      (Œª { (i‚ÇÅ x) ‚Üí ap i‚ÇÅ (Œµf x); (i‚ÇÇ x) ‚Üí ap i‚ÇÇ (Œµg x) }) ,
      (Œª { (i‚ÇÅ y) ‚Üí ap i‚ÇÅ (Œ∑f y); (i‚ÇÇ y) ‚Üí ap i‚ÇÇ (Œ∑g y) }))
#‚ü¶ f ‚äó g ‚üß‚ÇÅ =
  let (f , e) = #‚ü¶ f ‚üß‚ÇÅ in
  let (f‚Åª¬π , Œµf , Œ∑f) = hae-is-qinv e in
  let (g , e) = #‚ü¶ g ‚üß‚ÇÅ in
  let (g‚Åª¬π , Œµg , Œ∑g) = hae-is-qinv e in
  (Œª { (a , b) ‚Üí (f a , g b) }) ,
    qinv-is-equiv ((Œª { (c , d) ‚Üí (f‚Åª¬π c , g‚Åª¬π d) }) ,
      (Œª { (a , b) ‚Üí pair= (Œµf a , Œµg b) }) ,
      (Œª { (c , d) ‚Üí pair= (Œ∑f c , Œ∑g d) }))

toNames : ‚Ñï ‚Üí Names
toNames 0        = `0
toNames (succ n) = `1+ (toNames n)

toU : Names ‚Üí U
toU `0      = ZERO
toU (`1+ n) = PLUS ONE (toU n)

‚ü¶_‚üß‚ÇÄ : U ‚Üí M
‚ü¶ T ‚üß‚ÇÄ = #‚ü¶ T ‚üß‚ÇÄ , fromU T , ‚à£ ua (lem (size T) ‚óè #‚ü¶ normalizeC T ‚üß‚ÇÅ) ‚à£ where
  fromU : U ‚Üí Names
  fromU = toNames ‚àò size
  
  lem : (n : ‚Ñï) ‚Üí #‚ü¶ fromSize n ‚üß‚ÇÄ ‚âÉ El (toNames n)
  lem 0        = ide _
  lem (succ n) =
    let (f , e)     = lem n         in
    let (g , Œµ , Œ∑) = hae-is-qinv e in
    (Œª { (i‚ÇÅ 0‚ÇÅ) ‚Üí i‚ÇÅ 0‚ÇÅ; (i‚ÇÇ x) ‚Üí i‚ÇÇ (f x) }) , qinv-is-equiv
      ((Œª { (i‚ÇÅ 0‚ÇÅ) ‚Üí i‚ÇÅ 0‚ÇÅ; (i‚ÇÇ y) ‚Üí i‚ÇÇ (g y) }) ,
       (Œª { (i‚ÇÅ 0‚ÇÅ) ‚Üí refl _; (i‚ÇÇ x) ‚Üí ap i‚ÇÇ (Œµ x) }) ,
       (Œª { (i‚ÇÅ 0‚ÇÅ) ‚Üí refl _; (i‚ÇÇ y) ‚Üí ap i‚ÇÇ (Œ∑ y) }))

‚ü¶_‚üß‚ÇÄ‚Åª¬π : M ‚Üí U
‚ü¶ _ , name , _ ‚üß‚ÇÄ‚Åª¬π = toU name

‚ü¶‚ü¶_‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π : (T : U) ‚Üí ‚ü¶ ‚ü¶ T ‚üß‚ÇÄ ‚üß‚ÇÄ‚Åª¬π ‚ü∑ T
‚ü¶‚ü¶ T ‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π = tpt (Œª t ‚Üí t ‚ü∑ T) (lem (size T)) (_‚ü∑_.! (normalizeC T)) where
  lem : (n : ‚Ñï) ‚Üí fromSize n == toU (toNames n)
  lem 0        = refl _
  lem (succ n) = ap (PLUS ONE) (lem n)

‚ü¶_‚üß‚ÇÅ‚Åª¬π : {X Y : M} ‚Üí X == Y ‚Üí ‚ü¶ X ‚üß‚ÇÄ‚Åª¬π ‚ü∑ ‚ü¶ Y ‚üß‚ÇÄ‚Åª¬π
‚ü¶ refl _ ‚üß‚ÇÅ‚Åª¬π = id‚ü∑

completeness‚ÇÄ : {t s : U} ‚Üí ‚ü¶ t ‚üß‚ÇÄ == ‚ü¶ s ‚üß‚ÇÄ ‚Üí t ‚ü∑ s
completeness‚ÇÄ {t} {s} p = _‚ü∑_.! ‚ü¶‚ü¶ t ‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π ‚óé (‚ü¶ p ‚üß‚ÇÅ‚Åª¬π ‚óé ‚ü¶‚ü¶ s ‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π)

{-
‚ü¶‚ü¶_‚üß‚ÇÄ‚Åª¬π‚üß‚ÇÄ : (T : M) ‚Üí ‚ü¶ ‚ü¶ T ‚üß‚ÇÄ‚Åª¬π ‚üß‚ÇÄ == T
‚ü¶‚ü¶ T@(m , flat , p) ‚üß‚ÇÄ‚Åª¬π‚üß‚ÇÄ = dpair= (recTrunc _ (Œª x ‚Üí ! (x ‚óæ lem)) {!!} p , {!!}) --recTrunc (‚ü¶ ‚ü¶ T ‚üß‚ÇÄ‚Åª¬π ‚üß‚ÇÄ == T) (Œª x ‚Üí ! (x ‚óæ lem)) ({!!}) p
 where
  lem : {flat : Names} ‚Üí El flat == #‚ü¶ ‚ü¶ T ‚üß‚ÇÄ‚Åª¬π ‚üß‚ÇÄ
  lem {`0} = {!!}
  lem {`1+ n} = {!!}

‚ü¶_‚üß‚ÇÅ : {X Y : U} ‚Üí X ‚ü∑ Y ‚Üí ‚ü¶ X ‚üß‚ÇÄ == ‚ü¶ Y ‚üß‚ÇÄ
‚ü¶_‚üß‚ÇÅ {X} {Y} c = dpair= (ua #‚ü¶ c ‚üß‚ÇÅ , dpair= ({!!} , identify _ _)) where
  lem : (X Y : U) ‚Üí p‚ÇÅ (tpt is-finite (ua #‚ü¶ c ‚üß‚ÇÅ) (fromU X , ‚à£ ua (mlem (size X) ‚óè #‚ü¶ normalizeC X ‚üß‚ÇÅ) ‚à£)) == fromU Y
  lem = {!!}
-}
