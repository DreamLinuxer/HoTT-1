module Reversible.Pi.Semantics where

open import Type using (Type‚ÇÄ; Type‚ÇÅ)
open import Zero using (ùüò)
open import One using (ùüô)
open import Paths using (_==_; refl; _‚óæ_; tpt)
open import Coproduct using (_+_; i‚ÇÅ; i‚ÇÇ)
open import DependentSum using (Œ£; _,_; _√ó_; p‚ÇÅ)
open import PathsInSigma using (dpair=)
open import Functions using (_‚àò_)
open import Univalence using (ua)
open import Equivalences using (qinv-is-equiv; _‚âÉ_; _‚óè_; ide)
open import NaturalNumbers
open import PropositionalTruncation using (‚à£_‚à£; recTrunc; identify)

open import Reversible.Pi.Syntax
open import Reversible.UnivalentFibrations using (U[_]; `_; `equiv)
--open import Reversible.Pi.FinUniverse using (all-1-paths)

open import EmbeddingsInUniverse using (module UnivalentUniverseOfFiniteTypes)
open UnivalentUniverseOfFiniteTypes

M : Type‚ÇÅ
M = Œ£ Type‚ÇÄ is-finite

fromSize : ‚Ñï ‚Üí U
fromSize 0        = ZERO
fromSize (succ n) = PLUS ONE (fromSize n)

canonicalU : U ‚Üí U
canonicalU = fromSize ‚àò size

size+ : (n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí PLUS (fromSize n‚ÇÅ) (fromSize n‚ÇÇ) ‚ü∑ fromSize (add n‚ÇÅ n‚ÇÇ)
size+ 0         n‚ÇÇ = unite‚Çäl
size+ (succ n‚ÇÅ) n‚ÇÇ = assocr‚Çä ‚óé (id‚ü∑ ‚äï size+ n‚ÇÅ n‚ÇÇ)

size* : (n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí TIMES (fromSize n‚ÇÅ) (fromSize n‚ÇÇ) ‚ü∑ fromSize (mult n‚ÇÅ n‚ÇÇ)
size* 0         n‚ÇÇ = absorbr
size* (succ n‚ÇÅ) n‚ÇÇ = dist ‚óé ((unite‚ãÜl ‚äï size* n‚ÇÅ n‚ÇÇ) ‚óé size+ n‚ÇÇ (mult n‚ÇÅ n‚ÇÇ))

normalizeC : (t : U) ‚Üí t ‚ü∑ canonicalU t
normalizeC ZERO = id‚ü∑
normalizeC ONE  = uniti‚Çäl ‚óé swap‚Çä
normalizeC (PLUS t‚ÇÄ t‚ÇÅ) =
  (normalizeC t‚ÇÄ ‚äï normalizeC t‚ÇÅ) ‚óé size+ (size t‚ÇÄ) (size t‚ÇÅ) 
normalizeC (TIMES t‚ÇÄ t‚ÇÅ) =
  (normalizeC t‚ÇÄ ‚äó normalizeC t‚ÇÅ) ‚óé size* (size t‚ÇÄ) (size t‚ÇÅ)

#‚ü¶_‚üß‚ÇÄ : U ‚Üí Type‚ÇÄ
#‚ü¶ ZERO ‚üß‚ÇÄ        = ùüò
#‚ü¶ ONE  ‚üß‚ÇÄ        = ùüô
#‚ü¶ PLUS  t‚ÇÅ t‚ÇÇ ‚üß‚ÇÄ = #‚ü¶ t‚ÇÅ ‚üß‚ÇÄ + #‚ü¶ t‚ÇÇ ‚üß‚ÇÄ
#‚ü¶ TIMES t‚ÇÅ t‚ÇÇ ‚üß‚ÇÄ = #‚ü¶ t‚ÇÅ ‚üß‚ÇÄ √ó #‚ü¶ t‚ÇÇ ‚üß‚ÇÄ

#‚ü¶_‚üß‚ÇÅ : {X Y : U} ‚Üí X ‚ü∑ Y ‚Üí #‚ü¶ X ‚üß‚ÇÄ ‚âÉ #‚ü¶ Y ‚üß‚ÇÄ
#‚ü¶ _ ‚üß‚ÇÅ = {!!}

‚ü¶_‚üß‚ÇÄ : U ‚Üí M
‚ü¶ T ‚üß‚ÇÄ = #‚ü¶ T ‚üß‚ÇÄ , fromU T , ‚à£ ua (eq T ‚óè #‚ü¶ normalizeC T ‚üß‚ÇÅ) ‚à£ where
  toNames : ‚Ñï ‚Üí Names
  toNames 0        = `0
  toNames (succ n) = `1+ (toNames n)
  
  fromU : U ‚Üí Names
  fromU = toNames ‚àò size
  
  eq : (T : U) ‚Üí #‚ü¶ canonicalU T ‚üß‚ÇÄ ‚âÉ El (fromU T)
  eq ZERO = ide _
  eq ONE  = ide _
  eq (PLUS t‚ÇÅ t‚ÇÇ) =
    let e1 = eq t‚ÇÅ in
    let e2 = eq t‚ÇÇ in
    {!!}
  eq (TIMES t‚ÇÅ t‚ÇÇ) =
    let e1 = eq t‚ÇÅ in
    let e2 = eq t‚ÇÇ in
    {!!}

‚ü¶_‚üß‚ÇÄ‚Åª¬π : M ‚Üí U
‚ü¶ T , flatT , eq ‚üß‚ÇÄ‚Åª¬π = toU flatT where
  toU : Names ‚Üí U
  toU `0      = ZERO
  toU (`1+ n) = PLUS ONE (toU n)

‚ü¶‚ü¶_‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π : (T : U) ‚Üí ‚ü¶ ‚ü¶ T ‚üß‚ÇÄ ‚üß‚ÇÄ‚Åª¬π ‚ü∑ T
‚ü¶‚ü¶ ZERO ‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π = id‚ü∑
‚ü¶‚ü¶ ONE ‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π = unite‚Çär
‚ü¶‚ü¶ PLUS t‚ÇÅ t‚ÇÇ ‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π = {!!}
‚ü¶‚ü¶ _ ‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π = {!!}
