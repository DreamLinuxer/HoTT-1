module Reversible.Pi.Semantics where

open import Type using (Type‚ÇÄ)
open import One using (ùüô)
open import Zero using (ùüò)

open import Paths
open import DependentSum using (Œ£; _√ó_; _,_)
open import Coproduct
open import Functions using (_‚àò_)
open import Equivalences
open import Univalence
open import PathsInSigma

open import Data.Nat using (‚Ñï; zero; suc)
open import Data.Fin using (Fin; inject+)
open import Data.Vec
--open import Agda.Builtin.Equality using (subst)

open import Reversible.Pi.Syntax
open import Reversible.Pi.FinUniverse
open import Reversible.UnivalentFibrations
open import Reversible.Pi.AFin
open import Reversible.Pi.CPerm

‚ü¶_‚üß‚Çú : U ‚Üí Type‚ÇÄ
‚ü¶ ZERO ‚üß‚Çú        = ùüò
‚ü¶ ONE  ‚üß‚Çú        = ùüô
‚ü¶ PLUS  t‚ÇÅ t‚ÇÇ ‚üß‚Çú = ‚ü¶ t‚ÇÅ ‚üß‚Çú + ‚ü¶ t‚ÇÇ ‚üß‚Çú
--‚ü¶ TIMES t‚ÇÅ t‚ÇÇ ‚üß‚Çú = ‚ü¶ t‚ÇÅ ‚üß‚Çú √ó ‚ü¶ t‚ÇÇ ‚üß‚Çú

‚ü¶_‚üß‚ÇÅ : {X Y : U} ‚Üí X ‚ü∑ Y ‚Üí ‚ü¶ X ‚üß‚Çú ‚âÉ ‚ü¶ Y ‚üß‚Çú
‚ü¶ unite‚Çäl ‚üß‚ÇÅ = (Œª { (i‚ÇÅ ()); (i‚ÇÇ x) ‚Üí x }) , qinv-is-equiv (i‚ÇÇ , (Œª { (i‚ÇÅ ()); (i‚ÇÇ x) ‚Üí refl (i‚ÇÇ x) }) , refl)
‚ü¶ uniti‚Çäl ‚üß‚ÇÅ = !e ‚ü¶ unite‚Çäl ‚üß‚ÇÅ
‚ü¶ _ ‚üß‚ÇÅ = {!!}

‚ü¶_‚üß‚Çö : {X Y : U} ‚Üí X ‚ü∑ Y ‚Üí CPerm (size X) (size Y)
‚ü¶ _ ‚üß‚Çö = {!!}

cmpl1-lem : {X Y : U} ‚Üí (p : CPerm (size X) (size Y)) ‚Üí Œ£ (X ‚ü∑ Y) (Œª `p ‚Üí ‚ü¶ `p ‚üß‚Çö == p)
cmpl1-lem = {!!}

{-norm : (X : U) ‚Üí ‚ü¶ X ‚üß‚Çú ‚âÉ Fin (size X)
norm ZERO = {!!}
norm ONE = {!!}
norm _ = {!!}-}

{-# TERMINATING #-}
comm : (m n : ‚Ñï) ‚Üí Data.Nat._+_ m n == Data.Nat._+_ n m
comm 0 0 = refl 0
comm 0 (suc n) = {!!}
comm (suc m) 0 = ! (comm 0 (suc m))
comm (suc m) (suc n) = {!!}

norm : (X : U) ‚Üí ‚ü¶ X ‚üß‚Çú ‚âÉ Fin (size X)
norm ZERO = {!!}
norm ONE = {!!} --(i‚ÇÅ , qinv-is-equiv ((Œª { (i‚ÇÅ x) ‚Üí x; (i‚ÇÇ ()) }) , refl , (Œª { (i‚ÇÅ x) ‚Üí refl (i‚ÇÅ x); (i‚ÇÇ ()) })))
norm (PLUS X Y) = let (fx , ex) = norm X in
                  let (fy , ey) = norm Y in
                  let (gx , Œµx , Œ∑x) = hae-is-qinv ex in
                  let (gy , Œµy , Œ∑y) = hae-is-qinv ey in
                  (Œª { (i‚ÇÅ x) ‚Üí inject+ (size Y) (fx x);
                       (i‚ÇÇ y) ‚Üí let l = inject+ (size X) (fy y) in {!!} }) ,
                  qinv-is-equiv ({!!} , {!!} , {!!})

cmpl1 : {X Y : U} ‚Üí (p : ‚ü¶ X ‚üß‚Çú ‚âÉ ‚ü¶ Y ‚üß‚Çú) ‚Üí Œ£ (X ‚ü∑ Y) (Œª `p ‚Üí ‚ü¶ `p ‚üß‚ÇÅ == p)
cmpl1 p with cmpl1-lem (equiv-to-perm ({!!} p)) -- use norm
...   | (`p , e) = (`p , {!!})

{-
cmpl1 : {X Y : U} ‚Üí (p : ‚ü¶ X ‚üß‚Çú ‚âÉ ‚ü¶ Y ‚üß‚Çú) ‚Üí Œ£ (X ‚ü∑ Y) (Œª `p ‚Üí ‚ü¶ `p ‚üß‚ÇÅ == p)
cmpl1 (f , g , Œµ , Œ∑ , œÑ) with cmpl1-lem (equiv-to-perm {!!}) -- use norm
...     | (`p , e) = (`p , {!!})
-}
