
T‚ü¶_‚üß : ‚Ñï ‚Üí U
T‚ü¶   0   ‚üß = ZERO
T‚ü¶ suc n ‚üß = PLUS ONE T‚ü¶ n ‚üß

{-
size-T : (n : ‚Ñï) ‚Üí size T‚ü¶ n ‚üß == n
size-T 0       = refl 0
size-T (suc n) = ap suc (size-T n)

-- Quite a bit of induction
size-eq : {X Y : U} ‚Üí X ‚ü∑ Y ‚Üí size X == size Y
size-eq = {!!}

‚ü¶_‚üß‚Çú : (t : U) ‚Üí U[ Fin (size t) ]
‚ü¶ t ‚üß‚Çú = `Fin (size t)
-}


`‚ü¶_‚üß‚Çú : (t : U) ‚Üí U[ ‚ü¶ t ‚üß‚Çú ]
`‚ü¶ t ‚üß‚Çú = lift ‚ü¶ t ‚üß‚Çú

‚ü¶_‚üß‚ÇÅ' : {X : U} ‚Üí (t : X ‚ü∑ X) ‚Üí `‚ü¶ X ‚üß‚Çú == `‚ü¶ X ‚üß‚Çú
‚ü¶ _ ‚üß‚ÇÅ' = {!!}

tr : (n : ‚Ñï) ‚Üí ‚ü¶ T‚ü¶ n ‚üß ‚üß‚Çú == AFin n
tr 0       = refl (AFin 0)
tr (suc n) = ap ((_+_) ùüô) (tr n)

cmpl1' : {n : ‚Ñï} (p : `Fin n == `Fin n) ‚Üí Œ£ (T‚ü¶ n ‚üß ‚ü∑ T‚ü¶ n ‚üß)
  (Œª `p ‚Üí tpt (Œª m ‚Üí lift m == lift m) (tr n ‚óæ ua afin-fin-equiv) ‚ü¶ `p ‚üß‚ÇÅ' == p)
cmpl1' = {!!}
