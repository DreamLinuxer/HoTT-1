module Reversible.Pi.Semantics where

open import Type using (Type; Type‚ÇÄ)
open import One using (ùüô; 0‚ÇÅ)
open import Zero using (ùüò; recùüò)

open import Paths using (_==_; refl; _‚óæ_)
open import DependentSum using (Œ£; _√ó_; _,_; p‚ÇÅ; p‚ÇÇ)
open import Coproduct using (_+_)
open import Functions using (_‚àò_)
open import Equivalences using (_‚âÉ_; qinv-is-equiv)
open import Univalence using (ua)

open import Data.Nat using (‚Ñï; zero; suc; _*_; _‚â§_; s‚â§s; z‚â§n)
open import Data.Fin using (Fin; inject+; to‚Ñï) renaming (zero to fzero; suc to fsuc)
open import Data.List using (List; []; _‚à∑_)

open import Reversible.Pi.Syntax
open import Reversible.Pi.FinUniverse using (all-1-paths-fin)
--open import Reversible.UnivalentFibrations
open import Reversible.Pi.CPerm using (CPerm)

-- Write types for translations and manual inverses

-- (T : U) ‚Üí Œ£ Type‚ÇÄ (Œª X ‚Üí ‚à• X == Fin (size T) ‚à•)
‚ü¶_‚üß‚Çú : U ‚Üí Type‚ÇÄ
‚ü¶ ZERO ‚üß‚Çú        = ùüò
‚ü¶ ONE  ‚üß‚Çú        = ùüô
‚ü¶ PLUS  t‚ÇÅ t‚ÇÇ ‚üß‚Çú = ‚ü¶ t‚ÇÅ ‚üß‚Çú + ‚ü¶ t‚ÇÇ ‚üß‚Çú
‚ü¶ TIMES t‚ÇÅ t‚ÇÇ ‚üß‚Çú = ‚ü¶ t‚ÇÅ ‚üß‚Çú √ó ‚ü¶ t‚ÇÇ ‚üß‚Çú

fromSize : ‚Ñï ‚Üí U
fromSize 0       = ZERO
fromSize (suc n) = PLUS ONE (fromSize n)

canonicalU : U ‚Üí U
canonicalU = fromSize ‚àò size

size+ : (n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí PLUS (fromSize n‚ÇÅ) (fromSize n‚ÇÇ) ‚ü∑ fromSize (Data.Nat._+_ n‚ÇÅ n‚ÇÇ)
size+ 0        n‚ÇÇ = unite‚Çäl
size+ (suc n‚ÇÅ) n‚ÇÇ = assocr‚Çä ‚óé (id‚ü∑ ‚äï size+ n‚ÇÅ n‚ÇÇ)

size* : (n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí TIMES (fromSize n‚ÇÅ) (fromSize n‚ÇÇ) ‚ü∑ fromSize (n‚ÇÅ * n‚ÇÇ)
size* 0        n‚ÇÇ = absorbr
size* (suc n‚ÇÅ) n‚ÇÇ = dist ‚óé ((unite‚ãÜl ‚äï size* n‚ÇÅ n‚ÇÇ) ‚óé size+ n‚ÇÇ (n‚ÇÅ * n‚ÇÇ))

normalizeC : (t : U) ‚Üí t ‚ü∑ canonicalU t
normalizeC ZERO = id‚ü∑
normalizeC ONE  = uniti‚Çäl ‚óé swap‚Çä
normalizeC (PLUS t‚ÇÄ t‚ÇÅ) =
  (normalizeC t‚ÇÄ ‚äï normalizeC t‚ÇÅ) ‚óé size+ (size t‚ÇÄ) (size t‚ÇÅ) 
normalizeC (TIMES t‚ÇÄ t‚ÇÅ) =
  (normalizeC t‚ÇÄ ‚äó normalizeC t‚ÇÅ) ‚óé size* (size t‚ÇÄ) (size t‚ÇÅ) 

data Transposition (n : ‚Ñï) : Type‚ÇÄ where
  _X_ : (i j : Fin n) ‚Üí {p : to‚Ñï i ‚â§ to‚Ñï j} ‚Üí Transposition n

Transposition* : ‚Ñï ‚Üí Set
Transposition* n = List (Transposition n)

swapFin : {n : ‚Ñï} ‚Üí (a b : Fin n) ‚Üí (leq : to‚Ñï a ‚â§ to‚Ñï b) ‚Üí fromSize n ‚ü∑ fromSize n
swapFin fzero fzero z‚â§n = id‚ü∑
swapFin fzero (fsuc fzero) z‚â§n = assocl‚Çä ‚óé ((swap‚Çä ‚äï id‚ü∑) ‚óé assocr‚Çä)
swapFin fzero (fsuc (fsuc b)) z‚â§n =
  (assocl‚Çä ‚óé ((swap‚Çä ‚äï id‚ü∑) ‚óé assocr‚Çä)) ‚óé
  ((id‚ü∑ ‚äï swapFin fzero (fsuc b) z‚â§n) ‚óé
  (assocl‚Çä ‚óé ((swap‚Çä ‚äï id‚ü∑) ‚óé assocr‚Çä)))
swapFin (fsuc a) fzero ()
swapFin (fsuc a) (fsuc b) (s‚â§s leq) = id‚ü∑ ‚äï swapFin a b leq 

-- permutation to combinator

transposition*2c : (m n : ‚Ñï) (m‚â°n : m == n) ‚Üí Transposition* m ‚Üí fromSize m ‚ü∑ fromSize n
transposition*2c m n (refl _) [] = id‚ü∑ 
transposition*2c m n (refl _) (_X_ i j {leq} ‚à∑ œÄ) =
  swapFin i j leq ‚óé transposition*2c n n (refl _) œÄ

-- https://groupprops.subwiki.org/wiki/Transpositions_generate_the_finitary_symmetric_group
postulate
  trans-perm-equiv : {m n : ‚Ñï} {p : m == n} ‚Üí Transposition* m ‚âÉ CPerm m n

perm-to-trans : {m n : ‚Ñï} {p : m == n} ‚Üí CPerm m n ‚Üí Transposition* m
perm-to-trans {p = p} = p‚ÇÅ (p‚ÇÇ (trans-perm-equiv {p = p}))

reify : {m n : ‚Ñï} {p : m == n} ‚Üí CPerm m n ‚Üí fromSize m ‚ü∑ fromSize n
reify {m} {n} {p} œÄ = transposition*2c m n p (perm-to-trans {p = p} œÄ)

‚ü¶_‚üß‚ÇÅ : {X Y : U} ‚Üí X ‚ü∑ Y ‚Üí ‚ü¶ X ‚üß‚ÇÄ == ‚ü¶ Y ‚üß‚ÇÄ
‚ü¶ _ ‚üß‚ÇÅ = {!!}

fromSize‚àòsize : (X : U) ‚Üí fromSize (size X) ‚ü∑ X
fromSize‚àòsize ZERO = id‚ü∑
fromSize‚àòsize ONE = unite‚Çär
fromSize‚àòsize (PLUS t‚ÇÅ t‚ÇÇ) = ! (size+ (size t‚ÇÅ) (size t‚ÇÇ)) ‚óé (fromSize‚àòsize t‚ÇÅ ‚äï fromSize‚àòsize t‚ÇÇ)
fromSize‚àòsize (TIMES t‚ÇÅ t‚ÇÇ) = ! (size* (size t‚ÇÅ) (size t‚ÇÇ)) ‚óé (fromSize‚àòsize t‚ÇÅ ‚äó fromSize‚àòsize t‚ÇÇ)

postulate
  norm : (X : U) ‚Üí ‚ü¶ X ‚üß‚Çú ‚âÉ Fin (size X)
  size-eq : {X Y : U} ‚Üí ‚ü¶ X ‚üß‚Çú == ‚ü¶ Y ‚üß‚Çú ‚Üí size X == size Y


cmpl1 : {X Y : U} ‚Üí (p : ‚ü¶ X ‚üß‚Çú == ‚ü¶ Y ‚üß‚Çú) ‚Üí Œ£ (X ‚ü∑ Y) (Œª `p ‚Üí ua ‚ü¶ `p ‚üß‚ÇÅ == p)
cmpl1 {X = X} {Y} p with all-1-paths-fin (Paths.! (‚ü¶ normalizeC X ‚üß‚ÇÅ ‚óæ ua (norm (canonicalU X))) ‚óæ p ‚óæ ‚ü¶ normalizeC Y ‚üß‚ÇÅ ‚óæ ua (norm (canonicalU Y)))
...                 | (p' , e) = (! (fromSize‚àòsize X) ‚óé ((reify p') ‚óé (fromSize‚àòsize Y))) , {!!}

{-‚ü¶ ZERO ‚üß‚ÇÄ = Fin 0 , ‚à£ refl (Fin 0) ‚à£
‚ü¶ ONE ‚üß‚ÇÄ = Fin 1 , ‚à£ refl (Fin 1)  ‚à£
‚ü¶ PLUS t‚ÇÅ t‚ÇÇ ‚üß‚ÇÄ = Fin (size t‚ÇÅ + size t‚ÇÇ)-}
{-‚ü¶ T@(PLUS t‚ÇÅ t‚ÇÇ) ‚üß‚ÇÄ with ‚ü¶ t‚ÇÅ ‚üß‚ÇÄ | ‚ü¶ t‚ÇÇ ‚üß‚ÇÄ
... | (t‚ÇÅ' , p‚ÇÅ) | (t‚ÇÇ' , p‚ÇÇ) = t‚ÇÅ' + t‚ÇÇ' , recTrunc _ (Œª p‚ÇÅ' ‚Üí recTrunc _ (Œª p‚ÇÇ' ‚Üí ‚à£ f p‚ÇÅ' p‚ÇÇ' ‚à£) identify p‚ÇÇ) identify p‚ÇÅ where
  f : t‚ÇÅ' == Fin (size t‚ÇÅ) ‚Üí t‚ÇÇ' == Fin (size t‚ÇÇ) ‚Üí t‚ÇÅ' + t‚ÇÇ' == Fin (size T)
  f (refl _) (refl _) = {!!}
‚ü¶ T@(TIMES t‚ÇÅ t‚ÇÇ) ‚üß‚ÇÄ with ‚ü¶ t‚ÇÅ ‚üß‚ÇÄ | ‚ü¶ t‚ÇÇ ‚üß‚ÇÄ
... | (t‚ÇÅ' , p‚ÇÅ) | (t‚ÇÇ' , p‚ÇÇ) = t‚ÇÅ' √ó t‚ÇÇ' , recTrunc _ (Œª p‚ÇÅ' ‚Üí recTrunc _ (Œª p‚ÇÇ' ‚Üí ‚à£ f p‚ÇÅ' p‚ÇÇ' ‚à£) identify p‚ÇÇ) identify p‚ÇÅ where
  f : t‚ÇÅ' == Fin (size t‚ÇÅ) ‚Üí t‚ÇÇ' == Fin (size t‚ÇÇ) ‚Üí t‚ÇÅ' √ó t‚ÇÇ' == Fin (size T)
  f (refl _) (refl _) = {!!}-}
{-
‚ü¶_‚üß‚ÇÄ‚Åª¬π : {n : ‚Ñï} ‚Üí U[ Fin n ] ‚Üí U
‚ü¶ (t , |p|) ‚üß‚ÇÄ‚Åª¬π = 

size= : {X Y : U} ‚Üí X ‚ü∑ Y ‚Üí size X == size Y
size= unite‚Çäl = refl _
size= assocl‚ãÜ = {!!} -- associativity of multiplication, etc.
size= = {!!}

PathOverPi1 : (X Y : U) (c : size X == size Y) ‚Üí Type‚ÇÅ
PathOverPi1 X Y c = tpt (U[_] ‚àò Fin) c ‚ü¶ X ‚üß‚ÇÄ == ‚ü¶ Y ‚üß‚ÇÄ

syntax PathOverPi1 X Y c = X =[ c ]= Y

‚ü¶_‚üß‚ÇÅ : {X Y : U} ‚Üí (c : X ‚ü∑ Y) ‚Üí X =[ size= c ]= Y
‚ü¶ unite‚Çäl ‚üß‚ÇÅ = refl _
‚ü¶ assocl‚Çä ‚üß‚ÇÅ = {!!}
‚ü¶ _ ‚üß‚ÇÅ = {!!}

-- ‚ü¶_‚üß‚ÇÇ : {X Y : U} {p q : X ‚ü∑ Y} ‚Üí p ‚áî q ‚Üí ‚ü¶ p ‚üß‚ÇÅ == ‚ü¶ q ‚üß‚ÇÅ
-- ‚ü¶_‚üß‚ÇÉ : {X Y : U} {p q : X ‚ü∑ Y} {Œ± Œ≤ : p ‚áî q} ‚Üí ‚ü¶ Œ± ‚üß‚ÇÇ == ‚ü¶ Œ≤ ‚üß‚ÇÇ by truncation


-- Rewrite all-1-paths in terms of (p : m == n) ‚Üí tpt Fin p m == Fin n
‚ü¶_‚üß‚ÇÅ‚Åª¬π : {m n : ‚Ñï} {X : U[Fin m]} {Y : U[  ]} =[ c ]= Y ‚Üí X ‚ü∑ Y
‚ü¶_‚üß‚ÇÅ‚Åª¬π with all-1-paths {!!}
...          | _ = {!!}
-}
